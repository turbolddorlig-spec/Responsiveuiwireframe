import { AlertCircle, Database, FileText, Users, CheckCircle, ExternalLink, RefreshCw, Copy, Check } from "lucide-react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card";
import { Alert, AlertDescription, AlertTitle } from "./ui/alert";
import { Button } from "./ui/button";
import { projectId, publicAnonKey } from "../utils/supabase/info";
import { useState } from "react";
import { toast } from "sonner";

interface SetupRequiredScreenProps {
  errorCode?: string;
  errorMessage?: string;
}

export function SetupRequiredScreen({ errorCode, errorMessage }: SetupRequiredScreenProps) {
  const isSchemaError = errorCode === 'PGRST205' || errorMessage?.includes('schema cache') || errorMessage?.includes('table');
  const [copied, setCopied] = useState(false);
  const [sqlCopied, setSqlCopied] = useState(false);

  const supabaseUrl = `https://${projectId}.supabase.co`;
  const sqlEditorUrl = `${supabaseUrl}/project/default/sql/new`;

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      toast.success("–•—É—É–ª–∞–≥–¥–ª–∞–∞!");
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      toast.error("–•—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
    }
  };

  const copySqlAndOpenEditor = async () => {
    // Read SQL file content
    const sqlContent = `-- ============================================================================
-- COMPLETE SUPABASE SETUP FOR LOGISTICS SYSTEM
-- ============================================================================

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- User Profiles Table
CREATE TABLE IF NOT EXISTS user_profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    phone TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('super_admin', 'admin', 'operator', 'driver', 'driver_lead', 'accounting', 'warehouse')),
    driver_name TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Products Table
CREATE TABLE IF NOT EXISTS products (
    id SERIAL PRIMARY KEY,
    code TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    size TEXT,
    color TEXT,
    price NUMERIC(12, 0) NOT NULL DEFAULT 0,
    description TEXT,
    image_url TEXT,
    stock INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Orders Table
CREATE TABLE IF NOT EXISTS orders (
    id SERIAL PRIMARY KEY,
    code TEXT UNIQUE NOT NULL,
    customer_phone TEXT,
    total_price NUMERIC(12, 0) DEFAULT 0,
    status TEXT DEFAULT 'NEW' CHECK (status IN ('NEW', 'IN_TRANSIT', 'DELIVERED', 'CANCELLED')),
    payment_status TEXT DEFAULT 'UNPAID' CHECK (payment_status IN ('PAID', 'UNPAID', 'PARTIAL')),
    payment_method TEXT CHECK (payment_method IN ('CASH', 'CARD', 'TRANSFER', 'QPAY')),
    delivery_date TEXT,
    delivery_time TEXT,
    address TEXT,
    district TEXT,
    khoroo TEXT,
    driver_id UUID REFERENCES user_profiles(id),
    notes TEXT,
    products JSONB DEFAULT '[]'::JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Driver Leads Table
CREATE TABLE IF NOT EXISTS driver_leads (
    id SERIAL PRIMARY KEY,
    name TEXT,
    phone TEXT NOT NULL,
    district TEXT,
    province TEXT,
    note TEXT,
    status TEXT DEFAULT 'OPEN' CHECK (status IN ('OPEN', 'CONTACTED', 'CLOSED')),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Stocks Table
CREATE TABLE IF NOT EXISTS stocks (
    id SERIAL PRIMARY KEY,
    product_code TEXT NOT NULL,
    qty INTEGER NOT NULL DEFAULT 0,
    warehouse TEXT NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT positive_qty CHECK (qty >= 0)
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_user_profiles_phone ON user_profiles(phone);
CREATE INDEX IF NOT EXISTS idx_products_code ON products(code);
CREATE INDEX IF NOT EXISTS idx_orders_code ON orders(code);
CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
CREATE INDEX IF NOT EXISTS idx_stocks_product_code ON stocks(product_code);

-- Updated at trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_stocks_updated_at BEFORE UPDATE ON stocks FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Enable RLS
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE driver_leads ENABLE ROW LEVEL SECURITY;
ALTER TABLE stocks ENABLE ROW LEVEL SECURITY;

-- RLS Policies for user_profiles
CREATE POLICY "Allow authenticated users to view profiles" ON user_profiles FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow users to update own profile" ON user_profiles FOR UPDATE TO authenticated USING (auth.uid() = id);

-- RLS Policies for products
CREATE POLICY "Allow all authenticated users to view products" ON products FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admins to manage products" ON products FOR ALL TO authenticated 
USING (
    EXISTS (
        SELECT 1 FROM user_profiles 
        WHERE id = auth.uid() AND role IN ('super_admin', 'admin', 'warehouse')
    )
);

-- RLS Policies for orders
CREATE POLICY "Allow authenticated users to view orders" ON orders FOR SELECT TO authenticated USING (
    EXISTS (
        SELECT 1 FROM user_profiles 
        WHERE id = auth.uid() 
        AND (
            role IN ('super_admin', 'admin', 'operator', 'driver_lead', 'accounting')
            OR (role = 'driver' AND driver_id = auth.uid())
        )
    )
);

CREATE POLICY "Allow admins and operators to manage orders" ON orders FOR ALL TO authenticated 
USING (
    EXISTS (
        SELECT 1 FROM user_profiles 
        WHERE id = auth.uid() AND role IN ('super_admin', 'admin', 'operator')
    )
);

-- RLS Policies for stocks
CREATE POLICY "Allow authenticated users to view stocks" ON stocks FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow warehouse to manage stocks" ON stocks FOR ALL TO authenticated 
USING (
    EXISTS (
        SELECT 1 FROM user_profiles 
        WHERE id = auth.uid() AND role IN ('super_admin', 'admin', 'warehouse')
    )
);

-- RLS Policies for driver_leads
CREATE POLICY "Allow authenticated users to view driver leads" ON driver_leads FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admins to manage driver leads" ON driver_leads FOR ALL TO authenticated 
USING (
    EXISTS (
        SELECT 1 FROM user_profiles 
        WHERE id = auth.uid() AND role IN ('super_admin', 'admin', 'driver_lead')
    )
);

-- Insert sample products
INSERT INTO products (code, name, size, color, price, description, stock) VALUES
('PRD001', '–°“Ø“Ø 1–ª', '1–ª', '–¶–∞–≥–∞–∞–Ω', 3500, '–≠—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω —Å“Ø“Ø', 150),
('PRD002', '–¢–∞–ª—Ö', '500–≥', '–ë–æ—Ä', 2000, '–®–∏–Ω—ç —Ç–∞–ª—Ö', 200),
('PRD003', '–¢”©–º—Å', '1–∫–≥', '–®–∞—Ä', 1500, '–®–∏–Ω—ç —Ç”©–º—Å', 300),
('PRD004', '–õ—É—É–≤–∞–Ω', '1–∫–≥', '–£–ª–∞–∞–Ω', 2500, '–®–∏–Ω—ç –ª—É—É–≤–∞–Ω', 100),
('PRD005', '–°–æ–Ω–≥–∏–Ω–æ', '1–∫–≥', '–£–ª–∞–∞–Ω', 1800, '–®–∏–Ω—ç —Å–æ–Ω–≥–∏–Ω–æ', 150),
('PRD006', '”®–Ω–¥”©–≥', '30—à', '–¶–∞–≥–∞–∞–Ω', 12000, '–®–∏–Ω—ç ”©–Ω–¥”©–≥', 80),
('PRD007', '–ì—É—Ä–∏–ª', '1–∫–≥', '–¶–∞–≥–∞–∞–Ω', 2200, '–¶–∞–≥–∞–∞–Ω –≥—É—Ä–∏–ª', 250),
('PRD008', '–ë—É–¥–∞–∞', '1–∫–≥', '–¶–∞–≥–∞–∞–Ω', 3000, '–ß–∞–Ω–∞—Ä—Ç–∞–π –±—É–¥–∞–∞', 180),
('PRD009', '–≠–ª—Å—ç–Ω —á–∏—Ö—ç—Ä', '1–∫–≥', '–¶–∞–≥–∞–∞–Ω', 2800, '–≠–ª—Å—ç–Ω —á–∏—Ö—ç—Ä', 120),
('PRD010', '–¢–æ—Å', '1–ª', '–®–∞—Ä', 8500, '–£—Ä–≥–∞–º–ª—ã–Ω —Ç–æ—Å', 90)
ON CONFLICT (code) DO NOTHING;

-- Success message
DO $$
BEGIN
    RAISE NOTICE '‚úÖ Setup completed successfully!';
    RAISE NOTICE 'Tables created: user_profiles, products, orders, driver_leads, stocks';
    RAISE NOTICE 'Sample data inserted: 10 products';
    RAISE NOTICE '';
    RAISE NOTICE 'üìù Next steps:';
    RAISE NOTICE '1. Go to Authentication > Users';
    RAISE NOTICE '2. Create demo users (see CREDENTIALS.md)';
    RAISE NOTICE '3. Link user profiles';
    RAISE NOTICE '4. Refresh your app (F5)';
END $$;`;

    try {
      await navigator.clipboard.writeText(sqlContent);
      setSqlCopied(true);
      toast.success("‚úÖ SQL –∫–æ–¥ —Ö—É—É–ª–∞–≥–¥–ª–∞–∞! –û–¥–æ–æ Supabase SQL Editor –Ω—ç—ç–≥–¥—ç–∂ –±–∞–π–Ω–∞...");
      setTimeout(() => setSqlCopied(false), 3000);
      
      // Open SQL Editor in new tab
      window.open(sqlEditorUrl, '_blank');
    } catch (err) {
      toast.error("–•—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 flex items-center justify-center p-4">
      <Card className="max-w-5xl w-full shadow-2xl border-red-200">
        <CardHeader className="text-center">
          <div className="mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
            <AlertCircle className="w-8 h-8 text-red-600" />
          </div>
          <CardTitle className="text-3xl text-red-900">
            ‚ö†Ô∏è Supabase Database Setup —Ö–∏–π—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π!
          </CardTitle>
          <CardDescription className="text-lg mt-2">
            –¢–∞–Ω–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω Supabase credentials –±–∞–π–Ω–∞ - –∑”©–≤—Ö”©–Ω database tables “Ø“Ø—Å–≥—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π.<br />
            <strong className="text-blue-600">Edge Functions deploy —Ö–∏–π—Ö –•–≠–†–≠–ì–ì“Æ–ô!</strong> Frontend –Ω—å —à—É—É–¥ Supabase client –∞—à–∏–≥–ª–∞–Ω–∞.
          </CardDescription>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* Supabase Connection Info */}
          <Alert className="bg-green-50 border-green-200">
            <CheckCircle className="h-4 w-4 text-green-600" />
            <AlertTitle className="text-green-900">‚úÖ Supabase —Ö–æ–ª–±–æ–ª—Ç –±—ç–ª—ç–Ω –±–∞–π–Ω–∞</AlertTitle>
            <AlertDescription className="mt-2 space-y-1">
              <div className="font-mono text-xs">
                <strong>Project URL:</strong> {supabaseUrl}
              </div>
              <div className="text-xs text-green-700">
                –¢–∞–Ω–¥ –∑”©–≤—Ö”©–Ω database schema “Ø“Ø—Å–≥—ç—Ö “Ø–ª–¥—Å—ç–Ω!
              </div>
            </AlertDescription>
          </Alert>

          {/* Error Details */}
          {isSchemaError && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Database –∞–ª–¥–∞–∞ –∏–ª—ç—Ä–ª—ç—ç</AlertTitle>
              <AlertDescription className="mt-2 font-mono text-xs">
                {errorCode && <div>Error Code: {errorCode}</div>}
                {errorMessage && <div>Message: {errorMessage}</div>}
                <div className="mt-2 text-sm">
                  ‚òùÔ∏è –≠–Ω—ç –Ω—å "products" table –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞. –î–æ–æ—Ä—Ö –∞–ª—Ö–º—É—É–¥—ã–≥ –¥–∞–≥–∞–Ω–∞ —É—É.
                </div>
              </AlertDescription>
            </Alert>
          )}

          {/* Quick Setup Steps */}
          <div className="space-y-4">
            <h3 className="font-bold text-2xl flex items-center gap-2 text-center justify-center">
              <Database className="h-6 w-6 text-blue-600" />
              3 –ê–õ–•–ú–ê–ê–† SETUP –•–ò–ô–ù–≠ “Æ“Æ
            </h3>

            {/* Quick Action Buttons */}
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl p-6 text-white space-y-4">
              <h4 className="text-xl font-bold text-center">üöÄ ONE-CLICK SETUP</h4>
              <p className="text-sm text-center text-blue-100">
                –≠–Ω—ç —Ç–æ–≤—á –¥–∞—Ä–≤–∞–ª SQL –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä —Ö—É—É–ª–∞–≥–¥–∞–∂, Supabase SQL Editor –Ω—ç—ç–≥–¥—ç–Ω—ç
              </p>
              
              <Button 
                size="lg"
                className="w-full bg-white text-blue-900 hover:bg-blue-50 h-16 text-lg font-bold"
                onClick={copySqlAndOpenEditor}
              >
                {sqlCopied ? (
                  <>
                    <Check className="h-6 w-6 mr-2" />
                    ‚úÖ SQL –∫–æ–¥ —Ö—É—É–ª–∞–≥–¥–ª–∞–∞! SQL Editor –Ω—ç—ç—Ö...
                  </>
                ) : (
                  <>
                    <Database className="h-6 w-6 mr-2" />
                    SQL –•–£–£–õ–ñ SETUP –≠–•–õ“Æ“Æ–õ–≠–•
                  </>
                )}
              </Button>

              <div className="bg-white/20 rounded-lg p-4 space-y-2 text-sm">
                <p className="font-bold">‚úÖ –≠–Ω—ç —Ç–æ–≤—á –¥–∞—Ä–∞—Ö–∞–¥:</p>
                <ol className="list-decimal list-inside space-y-1 text-xs">
                  <li>SQL –∫–æ–¥ clipboard —Ä—É—É —Ö—É—É–ª–∞–≥–¥–∞–Ω–∞</li>
                  <li>Supabase SQL Editor —à–∏–Ω—ç tab-–¥ –Ω—ç—ç–≥–¥—ç–Ω—ç</li>
                  <li>SQL Editor –¥—ç—ç—Ä Ctrl+V (Mac: Cmd+V) –¥–∞—Ä–∂ paste —Ö–∏–π–Ω—ç</li>
                  <li>RUN ‚ñ∂Ô∏è —Ç–æ–≤—á –¥–∞—Ä–Ω–∞</li>
                  <li>–î–æ–æ—Ä—Ö "Refresh" —Ç–æ–≤—á –¥–∞—Ä–Ω–∞</li>
                </ol>
              </div>
            </div>
          </div>

          {/* Documentation Links */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h3 className="font-bold mb-3 flex items-center gap-2">
              <FileText className="h-5 w-5 text-blue-600" />
              üìö –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∑–∞–∞–≤–∞—Ä
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              <Button 
                variant="outline" 
                className="justify-start h-auto py-2"
                onClick={() => window.open('/SETUP_WALKTHROUGH.md', '_blank')}
              >
                <FileText className="h-4 w-4 mr-2" />
                <div className="text-left">
                  <div className="font-medium">SETUP_WALKTHROUGH.md</div>
                  <div className="text-xs text-gray-600">–ê–ª—Ö–∞–º –∞–ª—Ö–º–∞–∞—Ä –∑–∞–∞–≤–∞—Ä</div>
                </div>
              </Button>
              
              <Button 
                variant="outline" 
                className="justify-start h-auto py-2"
                onClick={() => window.open('/QUICKSTART.md', '_blank')}
              >
                <FileText className="h-4 w-4 mr-2" />
                <div className="text-left">
                  <div className="font-medium">QUICKSTART.md</div>
                  <div className="text-xs text-gray-600">–•—É—Ä–¥–∞–Ω —ç—Ö–ª—ç—Ö (5 –º–∏–Ω)</div>
                </div>
              </Button>
              
              <Button 
                variant="outline" 
                className="justify-start h-auto py-2"
                onClick={() => window.open('/CREDENTIALS.md', '_blank')}
              >
                <Users className="h-4 w-4 mr-2" />
                <div className="text-left">
                  <div className="font-medium">CREDENTIALS.md</div>
                  <div className="text-xs text-gray-600">Demo —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥</div>
                </div>
              </Button>
              
              <Button 
                variant="outline" 
                className="justify-start h-auto py-2"
                onClick={() => window.open('/TROUBLESHOOTING.md', '_blank')}
              >
                <AlertCircle className="h-4 w-4 mr-2" />
                <div className="text-left">
                  <div className="font-medium">TROUBLESHOOTING.md</div>
                  <div className="text-xs text-gray-600">–ê—Å—É—É–¥–∞–ª —à–∏–π–¥—ç—Ö</div>
                </div>
              </Button>
            </div>
          </div>

          {/* Action Button */}
          <div className="text-center pt-4">
            <Button 
              size="lg" 
              className="bg-blue-600 hover:bg-blue-700"
              onClick={() => window.location.reload()}
            >
              Setup –¥—É—É—Å—Å–∞–Ω –±–æ–ª refresh —Ö–∏–π—Ö
            </Button>
            <p className="text-xs text-gray-600 mt-2">
              Setup —Ö–∏–π–∂ –¥—É—É—Å—Å–∞–Ω—ã –¥–∞—Ä–∞–∞ —ç–Ω—ç —Ö—É—É–¥—Å—ã–≥ refresh —Ö–∏–π–Ω—ç “Ø“Ø
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}