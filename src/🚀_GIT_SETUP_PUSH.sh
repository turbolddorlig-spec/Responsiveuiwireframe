#!/bin/bash

clear

echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üöÄ GIT SETUP & PUSH - AUTO SETUP"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if git is installed
if ! command -v git &> /dev/null; then
    echo -e "${RED}‚ùå Git —Å—É—É–ª–≥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞!${NC}"
    echo ""
    echo "Git —Å—É—É–ª–≥–∞–∞—Ä–∞–π:"
    echo "  https://git-scm.com/downloads"
    exit 1
fi

echo -e "${GREEN}‚úì Git installed${NC}"
echo ""

echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "STEP 1: GIT CONFIG –®–ê–õ–ì–ê–•"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# Check git config
GIT_NAME=$(git config --global user.name 2>/dev/null)
GIT_EMAIL=$(git config --global user.email 2>/dev/null)

if [ -z "$GIT_NAME" ] || [ -z "$GIT_EMAIL" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Git config —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞${NC}"
    echo ""
    
    read -p "–ù—ç—Ä –æ—Ä—É—É–ª–∞—Ö: " INPUT_NAME
    read -p "Email –æ—Ä—É—É–ª–∞—Ö: " INPUT_EMAIL
    
    git config --global user.name "$INPUT_NAME"
    git config --global user.email "$INPUT_EMAIL"
    
    echo ""
    echo -e "${GREEN}‚úì Git config —Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω${NC}"
else
    echo -e "${GREEN}‚úì Git config:${NC}"
    echo "  –ù—ç—Ä:   $GIT_NAME"
    echo "  Email: $GIT_EMAIL"
fi

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "STEP 2: GIT REPOSITORY –®–ê–õ–ì–ê–•"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

if [ -d ".git" ]; then
    echo -e "${GREEN}‚úì Git repository –∞–ª—å —Ö—ç–¥–∏–π–Ω initialized${NC}"
    
    # Check for remote
    if git remote -v | grep -q "origin"; then
        CURRENT_REMOTE=$(git remote get-url origin)
        echo -e "${GREEN}‚úì Remote repository configured:${NC}"
        echo "  $CURRENT_REMOTE"
        echo ""
        
        read -p "Remote URL —Å–æ–ª–∏—Ö —É—É? (y/n) " -n 1 -r
        echo ""
        
        if [[ $REPLY =~ ^[Yy–¢—Ç]$ ]]; then
            read -p "–®–∏–Ω—ç GitHub repo URL: " NEW_REMOTE
            git remote set-url origin "$NEW_REMOTE"
            echo -e "${GREEN}‚úì Remote URL —à–∏–Ω—ç—á–∏–ª—ç–≥–¥—Å—ç–Ω${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Remote repository configured –±–∞–π—Ö–≥“Ø–π${NC}"
        echo ""
        read -p "GitHub repo URL –æ—Ä—É—É–ª–∞—Ö: " REMOTE_URL
        git remote add origin "$REMOTE_URL"
        echo -e "${GREEN}‚úì Remote added${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Git repository initialized –±–∞–π—Ö–≥“Ø–π${NC}"
    echo ""
    echo "Initializing..."
    
    git init
    echo -e "${GREEN}‚úì Git initialized${NC}"
    echo ""
    
    read -p "GitHub repo URL –æ—Ä—É—É–ª–∞—Ö: " REMOTE_URL
    git remote add origin "$REMOTE_URL"
    echo -e "${GREEN}‚úì Remote added${NC}"
fi

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "STEP 3: –§–ê–ô–õ–£–£–î –¶–≠–í–≠–†–õ–≠–•"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# Count .md files
MD_COUNT=$(find . -maxdepth 1 -name "*.md" -o -name "*.MD" | wc -l)
echo "üìÑ Root folder –¥—ç—ç—Ä .md —Ñ–∞–π–ª: $MD_COUNT"

if [ $MD_COUNT -gt 10 ]; then
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  –•—ç—Ç –æ–ª–æ–Ω .md —Ñ–∞–π–ª –±–∞–π–Ω–∞!${NC}"
    echo ""
    echo "–°–æ–Ω–≥–æ–ª—Ç—É—É–¥:"
    echo "  1) Docs folder “Ø“Ø—Å–≥—ç–∂ –±—É—É–ª–≥–∞—Ö (—Å–∞–Ω–∞–ª –±–æ–ª–≥–æ–∂ –±–∞–π–Ω–∞)"
    echo "  2) “Æ–ª–¥—ç—ç—Ö (commit —Ö–∏–π—Ö—ç–¥ —É–¥–∞–∞–Ω –±–∞–π—Ö)"
    echo "  3) –£—Å—Ç–≥–∞—Ö (–ê–Æ–£–õ–¢–ê–ô!)"
    echo ""
    read -p "–°–æ–Ω–≥–æ–ª—Ç (1/2/3): " -n 1 -r
    echo ""
    
    if [[ $REPLY == "1" ]]; then
        mkdir -p docs
        
        # Move all .md except important ones
        KEEP_FILES=("README.md" "FEATURES.md" "CREDENTIALS.md" "QUICKSTART.md")
        
        for file in *.md *.MD 2>/dev/null; do
            if [[ -f "$file" ]]; then
                # Check if it's a keep file
                SHOULD_KEEP=0
                for keep in "${KEEP_FILES[@]}"; do
                    if [[ "$file" == "$keep" ]]; then
                        SHOULD_KEEP=1
                        break
                    fi
                done
                
                if [ $SHOULD_KEEP -eq 0 ]; then
                    mv "$file" docs/ 2>/dev/null
                fi
            fi
        done
        
        echo -e "${GREEN}‚úì .md —Ñ–∞–π–ª—É—É–¥ docs/ folder —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª—ç–≥–¥—Å—ç–Ω${NC}"
        echo ""
        echo "Root folder –¥—ç—ç—Ä “Ø–ª–¥—Å—ç–Ω:"
        ls -1 *.md 2>/dev/null || echo "  (none)"
    elif [[ $REPLY == "3" ]]; then
        echo ""
        echo -e "${RED}‚ö†Ô∏è  –ê–ù–•–ê–ê–†–£–£–õ–ì–ê: –ë“Ø—Ö .md —Ñ–∞–π–ª—É—É–¥ —É—Å—Ç–≥–∞–≥–¥–∞–Ω–∞!${NC}"
        read -p "“Æ—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç—Ö “Ø“Ø? (yes –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø): " CONFIRM
        
        if [[ "$CONFIRM" == "yes" ]]; then
            rm -f *.md *.MD 2>/dev/null
            echo -e "${GREEN}‚úì .md —Ñ–∞–π–ª—É—É–¥ —É—Å—Ç–≥–∞–≥–¥—Å–∞–Ω${NC}"
        else
            echo "–¶—É—Ü–ª–∞–≥–¥—Å–∞–Ω"
        fi
    fi
fi

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "STEP 4: GIT STATUS"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

git status -s | head -20

TOTAL_FILES=$(git status -s | wc -l)
echo ""
echo "–ù–∏–π—Ç —Ñ–∞–π–ª: $TOTAL_FILES"

if [ $TOTAL_FILES -gt 100 ]; then
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  –ú–∞—à –æ–ª–æ–Ω —Ñ–∞–π–ª –±–∞–π–Ω–∞ ($TOTAL_FILES)${NC}"
    echo ""
    echo "–≠–Ω—ç –Ω—å commit —É–¥–∞–∞–Ω –±–∞–π—Ö –±–æ–ª–Ω–æ."
    echo "node_modules/ —ç—Å–≤—ç–ª dist/ folder ignore —Ö–∏–π–≥–¥—Å—ç–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∞—Ä–∞–π."
    echo ""
    
    read -p "“Æ—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç—Ö “Ø“Ø? (y/n) " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy–¢—Ç]$ ]]; then
        echo "–¶—É—Ü–ª–∞–≥–¥—Å–∞–Ω"
        exit 1
    fi
fi

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "STEP 5: GIT ADD"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

git add -A

STAGED=$(git diff --cached --numstat | wc -l)
echo -e "${GREEN}‚úì $STAGED —Ñ–∞–π–ª staged${NC}"

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "STEP 6: GIT COMMIT"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

read -p "Commit message (default: Initial commit): " COMMIT_MSG

if [ -z "$COMMIT_MSG" ]; then
    COMMIT_MSG="Initial commit - ZoodShopy Logistics System

- React + TypeScript frontend
- Tailwind CSS styling
- Supabase backend integration
- Demo mode with localStorage
- Auto-fix scripts for deployment
- Full order management system"
fi

git commit -m "$COMMIT_MSG"

if [ $? -ne 0 ]; then
    echo ""
    echo -e "${RED}‚ùå Commit –∞–º–∂–∏–ª—Ç–≥“Ø–π!${NC}"
    echo ""
    echo "–ú–∞–≥–∞–¥–≥“Ø–π commit —Ö–∏–π—Ö –∑“Ø–π–ª –±–∞–π—Ö–≥“Ø–π."
    echo "Git status:"
    git status
    exit 1
fi

echo ""
echo -e "${GREEN}‚úì Commit –∞–º–∂–∏–ª—Ç—Ç–∞–π${NC}"

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "STEP 7: GIT PUSH"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# Check if we have a remote
if ! git remote -v | grep -q "origin"; then
    echo -e "${RED}‚ùå Remote repository configured –±–∞–π—Ö–≥“Ø–π!${NC}"
    exit 1
fi

REMOTE_URL=$(git remote get-url origin)
echo "Remote: $REMOTE_URL"
echo ""

# Determine default branch
CURRENT_BRANCH=$(git branch --show-current 2>/dev/null)

if [ -z "$CURRENT_BRANCH" ]; then
    # No branch yet, create main
    git branch -M main
    CURRENT_BRANCH="main"
    echo -e "${GREEN}‚úì Branch created: main${NC}"
fi

echo "Branch: $CURRENT_BRANCH"
echo ""

echo "Pushing..."
git push -u origin "$CURRENT_BRANCH"

if [ $? -ne 0 ]; then
    echo ""
    echo -e "${RED}‚ùå Push –∞–º–∂–∏–ª—Ç–≥“Ø–π!${NC}"
    echo ""
    echo "–ú–∞–≥–∞–¥–≥“Ø–π —à–∞–ª—Ç–≥–∞–∞–Ω—É—É–¥:"
    echo ""
    echo "1. GitHub authentication –∞–ª–¥–∞–∞:"
    echo "   ‚Üí GitHub Personal Access Token “Ø“Ø—Å–≥—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π"
    echo "   ‚Üí https://github.com/settings/tokens"
    echo "   ‚Üí 'repo' permission ”©–≥”©—Ö"
    echo ""
    echo "2. Remote repository –±–∞–π—Ö–≥“Ø–π:"
    echo "   ‚Üí GitHub –¥—ç—ç—Ä —à–∏–Ω—ç repository “Ø“Ø—Å–≥—ç—Ö"
    echo "   ‚Üí https://github.com/new"
    echo ""
    echo "3. Force push —Ö—ç—Ä—ç–≥—Ç—ç–π:"
    echo "   ‚Üí git push -f origin $CURRENT_BRANCH"
    echo ""
    
    read -p "Force push –æ—Ä–æ–ª–¥–æ—Ö —É—É? (y/n) " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy–¢—Ç]$ ]]; then
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è  Force pushing...${NC}"
        git push -f origin "$CURRENT_BRANCH"
        
        if [ $? -eq 0 ]; then
            echo ""
            echo -e "${GREEN}‚úì Force push –∞–º–∂–∏–ª—Ç—Ç–∞–π!${NC}"
        else
            echo ""
            echo -e "${RED}‚ùå Force push –∞–º–∂–∏–ª—Ç–≥“Ø–π${NC}"
            exit 1
        fi
    else
        exit 1
    fi
fi

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚úÖ –ê–ú–ñ–ò–õ–¢–¢–ê–ô!"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${GREEN}‚úì Git configured${NC}"
echo -e "${GREEN}‚úì Repository initialized${NC}"
echo -e "${GREEN}‚úì Files committed${NC}"
echo -e "${GREEN}‚úì Pushed to GitHub${NC}"
echo ""
echo "GitHub: $REMOTE_URL"
echo "Branch: $CURRENT_BRANCH"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "–î–ê–†–ê–ê–ì–ò–ô–ù –ê–õ–•–ê–ú:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo "1. Vercel –¥—ç—ç—Ä deploy —Ö–∏–π—Ö:"
echo "   ‚Üí https://vercel.com/new"
echo "   ‚Üí 'Import Git Repository'"
echo "   ‚Üí GitHub repository —Å–æ–Ω–≥–æ—Ö"
echo "   ‚Üí Deploy –¥–∞—Ä–∞—Ö"
echo ""
echo "2. Vercel –¥—ç—ç—Ä environment variables —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö:"
echo "   ‚Üí Project Settings ‚Üí Environment Variables"
echo "   ‚Üí SUPABASE_URL"
echo "   ‚Üí SUPABASE_ANON_KEY"
echo "   ‚Üí SUPABASE_SERVICE_ROLE_KEY"
echo ""
echo "3. Production URL —à–∞–ª–≥–∞—Ö:"
echo "   ‚Üí Ctrl+Shift+R (Hard refresh)"
echo "   ‚Üí Demo mode –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${GREEN}üéâ –ë–≠–õ–≠–ù! VERCEL DEPLOY –•–ò–ô!${NC}"
echo ""
